// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
    // previewFeatures = ["jsonProtocol"]
}

datasource db {
    // provider = "sqlite" // default
    provider     = "mysql" // planetscale
    // provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma" // planetscale
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum USER_STATUS {
    ACTIVE
    BANNED
    DELETED
}

enum USER_ROLE {
    ADMIN
    EDITOR
    USER
}

model User {
    // id            String    @id @default(cuid())
    id            String    @id @default(nanoid(7))
    username      String?   @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    status USER_STATUS @default(ACTIVE)
    role   USER_ROLE   @default(USER)

    topics     Topic[]
    analogies  Analogy[]
    likes      Like[]
    dislikes   Dislike[]
    comments   Comment[]
    activities Activity[]

    @@index([username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CATEGORY_STATUS {
    PENDING
    PUBLISHED
    REJECTED
    DELETED
}

model Category {
    id     String          @id @default(uuid())
    name   String          @unique
    slug   String          @unique
    status CATEGORY_STATUS @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    topics Topic[]
}

enum TOPIC_STATUS {
    PENDING
    PUBLISHED
    REJECTED
    DELETED
}

model Topic {
    id     String       @id @default(uuid())
    title  String
    slug   String       @unique
    status TOPIC_STATUS @default(PENDING)
    url    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    analogies Analogy[]

    starter    User     @relation(fields: [starterId], references: [id])
    starterId  String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    @@unique([starterId, title])
    @@index([starterId, id])
    @@index([categoryId])
}

enum ANALOGY_STATUS {
    PENDING
    PUBLISHED
    REJECTED
    DELETED
}

model Analogy {
    // id          String         @id @default(uuid())
    id String @id @default(nanoid(8))

    title       String
    description String
    reference   String?
    status      ANALOGY_STATUS @default(PENDING)
    // pinned      Boolean        @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    likes    Like[]
    dislikes Dislike[]
    comments Comment[]

    author   User   @relation(fields: [authorId], references: [id])
    authorId String
    topic    Topic  @relation(fields: [topicId], references: [id])
    topicId  String

    @@unique([createdAt, id])
    @@index([authorId, id])
    @@index([topicId])
}

model Like {
    id String @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    voter     User    @relation(fields: [voterId], references: [id])
    voterId   String
    analogy   Analogy @relation(fields: [analogyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    analogyId String

    @@unique([voterId, analogyId])
    @@index([voterId, id])
    @@index([analogyId])
}

model Dislike {
    id String @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    voter     User    @relation(fields: [voterId], references: [id])
    voterId   String
    analogy   Analogy @relation(fields: [analogyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    analogyId String

    @@unique([voterId, analogyId])
    @@index([voterId, id])
    @@index([analogyId])
}

enum COMMENT_STATUS {
    PENDING
    PUBLISHED
    REJECTED
    DELETED
}

model Comment {
    id      String         @id @default(uuid())
    content String
    status  COMMENT_STATUS @default(PUBLISHED)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    commenter   User    @relation(fields: [commenterId], references: [id])
    commenterId String
    analogy     Analogy @relation(fields: [analogyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    analogyId   String

    @@index([commenterId])
    @@index([analogyId])
}

enum ACTIVITY_ACTION {
    created
    updated
    deleted
}

enum ENTITY_TYPE {
    category
    topic
    analogy
    comment
    user
}

model Activity {
    id          String          @id @default(cuid())
    user        User            @relation(fields: [userId], references: [id])
    userId      String
    entityType  ENTITY_TYPE
    entityId    String
    entityTitle String
    action      ACTIVITY_ACTION
    timestamp   DateTime        @default(now())

    @@index([userId])
}

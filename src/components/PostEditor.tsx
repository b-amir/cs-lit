import { api } from "@/utils/api";
// import { useUser } from "@clerk/nextjs";
import { useSession } from "next-auth/react";
import toast from "react-hot-toast";

import { useState } from "react";
import { CornerLoading } from "./loading";

export const PostEditor = ({
  topicId,
  topicTitle,
}: {
  topicId?: string;
  topicTitle?: string;
}) => {
  // const { user, isLoaded: userLoaded, isSignedIn } = useUser();
  const { data: sessionData, status: sessionStatus } = useSession();

  const { mutate, isLoading: isPosting } = api.analogy.create.useMutation({
    onSuccess: () => {
      setInput({
        title: "",
        description: "",
        topicId: "",
      });
      void ctx.analogy.getAll.invalidate();
      void ctx.analogy.getAnalogiesByTopicId.invalidate();

      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });

      toast.success("You posted your analogy!");
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors;
      console.log(errorMessage);
      if (errorMessage) {
        if (errorMessage.description) {
          toast.error(errorMessage?.description.join(" "));
        } else {
          toast.error("Something went wrong.");
        }
      }
    },
  });

  const [input, setInput] = useState({
    title: "",
    description: "",
    topicId: "",
  });

  const ctx = api.useContext();
  if (sessionStatus === "loading") return <CornerLoading />;

  if (sessionData && !sessionData.user) {
    return <>Please sign in to post</>;
  } else {
    return (
      <>
        <form onSubmit={(e) => e.preventDefault()} className="px-16">
          <div className=" mx-auto my-5 mb-16 w-full rounded-[17px] border border-gray-200 bg-gray-50 transition-all hover:border-[#c1c1c1] focus:border-[#c1c1c1] dark:border-gray-600 dark:bg-gray-700">
            <div className="rounded-[17px] bg-white px-6 pt-6 dark:bg-gray-800">
              <label htmlFor="comment" className="sr-only">
                Add your analogy
              </label>
              <textarea
                id="comment"
                rows={4}
                className="w-full border-0 border-transparent bg-white px-0 text-sm text-[#2A2A2E] !outline-none focus:border-transparent focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
                placeholder="Add your analogy ..."
                required
                value={input.description}
                onChange={(e) =>
                  setInput({
                    ...input,
                    description: e.target.value,
                  })
                }
                disabled={isPosting}
              ></textarea>
            </div>
            <div className="flex items-center justify-between border-t px-3 py-2 dark:border-gray-600">
              <div className="flex space-x-1 pl-0 sm:pl-2">
                <button
                  type="button"
                  className=" font-small inline-flex cursor-pointer select-none justify-center rounded p-2 text-xs text-gray-500 hover:bg-gray-100 hover:text-[#2A2A2E] dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white"
                >
                  how to write markdown?
                </button>
              </div>
              <button
                // dont refresh the page on submit
                disabled={isPosting}
                onClick={() =>
                  mutate({
                    title: input.title,
                    description: input.description,
                    // a new cuid generated by the client
                    topicId: topicId ?? "",
                  })
                }
                type="submit"
                className="group  flex flex-row justify-center rounded-xl
                border border-[#5c2c1d2b] bg-[#ff7263] px-6 py-1.5 text-sm font-semibold text-[#ffffffd3] shadow-sm transition-all
                duration-200 [text-shadow:_0_1px_0_rgb(0_0_0_/_10%)] hover:border-[#5c2c1d66] hover:shadow-md"
              >
                <span className="cursor-pointer transition-transform duration-300 group-hover:-translate-x-0.5 group-hover:[text-shadow:_0_2px_0_rgb(0_0_0_/_15%)]">
                  Post analogy
                </span>
              </button>
            </div>
          </div>
        </form>
      </>
    );
  }
};

import React, { useState } from "react";
import { api } from "@/utils/api";
import { PageLayout } from "@/components/layout";
import { TbActivity, TbUrgent } from "react-icons/tb";
import { archivo } from "@/styles/customFonts";
import Head from "next/head";
import { PillsRow } from "../../components/Pills";
import { ListView } from "./ListView";
import { IoIosArrowUp } from "react-icons/io";

export default function AdminPage(props) {
  const [AdminFooterCollapsed, setAdminFooterCollapsed] = useState(false);

  const {
    data: categoriesData,
    hasNextPage: categoriesHasNextPage,
    fetchNextPage: fetchNextCategoryPage,
    isFetchingNextPage: isFetchingNextCategoryPage,
  } = api.category.getAll.useInfiniteQuery(
    {},
    { getNextPageParam: (lastPage) => lastPage.pageInfo.nextCursor }
  );

  const {
    data: topicsData,
    hasNextPage: topicsHasNextPage,
    fetchNextPage: fetchNextTopicPage,
    isFetchingNextPage: isFetchingNextTopicPage,
  } = api.topic.getAll.useInfiniteQuery(
    {},
    { getNextPageParam: (lastPage) => lastPage.pageInfo.nextCursor }
  );

  const {
    data: analogiesData,
    hasNextPage: analogiesHasNextPage,
    fetchNextPage: fetchNextAnalogyPage,
    isFetchingNextPage: isFetchingNextAnalogyPage,
  } = api.analogy.getAll.useInfiniteQuery(
    {},
    { getNextPageParam: (lastPage) => lastPage.pageInfo.nextCursor }
  );

  const {
    data: usersData,
    hasNextPage: usersHasNextPage,
    fetchNextPage: fetchNextUserPage,
    isFetchingNextPage: isFetchingNextUserPage,
  } = api.profile.getAll.useInfiniteQuery(
    {},
    { getNextPageParam: (lastPage) => lastPage.pageInfo.nextCursor }
  );

  // const { data: commentsData, isFetching: commentsAreFetching } =
  //   api.comment.getAll.useQuery();

  const [activeSection, setActiveSection] = useState("Categories");

  function getData(activeSection: string) {
    switch (activeSection) {
      case "Categories":
        return categoriesData;
      case "Topics":
        return topicsData;
      case "Analogies":
        return analogiesData;
      case "Users":
        return usersData;
      default:
        return [];
    }
  }

  function getHasNextPage(activeSection: string) {
    switch (activeSection) {
      case "Categories":
        return categoriesHasNextPage;
      case "Topics":
        return topicsHasNextPage;
      case "Analogies":
        return analogiesHasNextPage;
      case "Users":
        return usersHasNextPage;
      default:
        return false;
    }
  }

  function getFetchNextPage(activeSection: string) {
    switch (activeSection) {
      case "Categories":
        return fetchNextCategoryPage;
      case "Topics":
        return fetchNextTopicPage;
      case "Analogies":
        return fetchNextAnalogyPage;
      case "Users":
        return fetchNextUserPage;
      default:
        return;
    }
  }

  function getIsFetchingNextPage(activeSection: string) {
    switch (activeSection) {
      case "Categories":
        return isFetchingNextCategoryPage;
      case "Topics":
        return isFetchingNextTopicPage;
      case "Analogies":
        return isFetchingNextAnalogyPage;
      case "Users":
        return isFetchingNextUserPage;
      default:
        return false;
    }
  }

  return (
    <>
      <Head>
        <title>CSLIT - Admin Panel</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div
          id="admin=page"
          className="mt-[90px] flex h-[calc(100dvh-90px-2px)] w-full flex-col border border-y-[#5555552a]"
        >
          <div id="admin-page-columns" className=" flex ">
            <div
              id="admin-lists"
              className={` w-3/4 overflow-x-clip overflow-y-clip border border-r-[#5555552a] pb-[92px] transition-all ${
                AdminFooterCollapsed
                  ? "h-[calc(100dvh-2rem-90px)]"
                  : "h-[calc(100dvh-20dvh-90px)]"
              }`}
            >
              <PillsRow
                pills={[
                  "Categories",
                  "Topics",
                  "Users",
                  "Analogies",
                  "Comments",
                ]}
                setActiveSection={setActiveSection}
                activeSection={activeSection}
              />

              <ListView
                title={activeSection}
                data={getData(activeSection)}
                hasNextPage={getHasNextPage(activeSection)}
                fetchNextPage={getFetchNextPage(activeSection)}
                isFetchingNextPage={getIsFetchingNextPage(activeSection)}
              />
            </div>

            <div
              id="admin-sidepanel"
              className="relative z-20 mx-auto h-full w-1/4  overflow-x-clip   border  border-[#b5b5b511] bg-[#f7f3ee] transition-all"
            >
              <div
                id="urgent-header"
                className="flex h-[96px] w-full flex-col justify-between  rounded-sm border-b border-b-[#5555552a] bg-gradient-to-br from-[#fff] to-[#f7f3ee00] px-6  py-4"
              >
                <h1
                  className={`${archivo.className}   flex flex-row items-center  gap-1 text-3xl font-bold`}
                >
                  <TbUrgent className="mb-0.5" /> Urgent
                </h1>
                <div className="w-full  pt-1 text-xs font-light text-[#7a6a55]">
                  following items need your attention.
                </div>
              </div>
            </div>
          </div>
          <AdminFooter
            AdminFooterCollapsed={AdminFooterCollapsed}
            setAdminFooterCollapsed={setAdminFooterCollapsed}
          />
        </div>
      </PageLayout>
    </>
  );
}

interface IAdminFooterProps {
  AdminFooterCollapsed: boolean;
  setAdminFooterCollapsed: React.Dispatch<React.SetStateAction<boolean>>;
}
function AdminFooter({
  AdminFooterCollapsed,
  setAdminFooterCollapsed,
}: IAdminFooterProps) {
  return (
    <div
      id="admin-footer"
      className={`absolute bottom-0 z-20 w-4/6 border-t border-t-[#cbcbcb]  bg-[#e3e3e3] transition-all ${
        AdminFooterCollapsed
          ? "h-8 shadow-sm"
          : "h-[20dvh] shadow-[0px_-1.5px_2px_0px_#00000010]"
      }`}
    >
      <div
        id="activity-log-header"
        className={`${archivo.className} mx-auto flex h-8 w-[calc(100%-1px)] cursor-pointer flex-row items-center justify-center rounded-sm border-r border-[#5555552a] bg-[#f3f3f3] text-sm font-bold shadow-sm transition-all hover:bg-[#fdfdfd] `}
        onClick={() => setAdminFooterCollapsed(!AdminFooterCollapsed)}
      >
        <TbActivity className="mb-0 mr-1 " /> Activity Log{" "}
        <IoIosArrowUp
          className={`mb-0 ml-1 scale-75 text-gray-400 transition-all delay-300  ${
            AdminFooterCollapsed ? "" : "rotate-180"
          }`}
        />
      </div>
      {!AdminFooterCollapsed && (
        <div id="activity-log-list " className="w-full p-4">
          <div className="mx-auto w-[98%] text-sm text-gray-600">
            Amir Bazgir Deleted a post:{" "}
          </div>
        </div>
      )}
    </div>
  );
}

// admin panel page

import React from "react";
import { useRouter } from "next/router";
import { api } from "@/utils/api";
import { PageLayout } from "@/components/layout";
import { LoadingPage } from "@/components/loading";
import { FaArrowLeft } from "react-icons/fa";
import { RiImageLine } from "react-icons/ri";
import { LuList } from "react-icons/lu";
import { TbTriangleInvertedFilled } from "react-icons/tb";
import { archivo } from "@/styles/customFonts";
import { useDebounce } from "@/hooks/useDebounce";
import { useSpring, animated } from "@react-spring/web";
import { CgSpinner } from "react-icons/cg";
import { FaExclamationTriangle } from "react-icons/fa";
import { MdDelete, MdEdit } from "react-icons/md";
import { AiTwotoneEdit } from "react-icons/ai";
import { IoIosArrowUp } from "react-icons/io";
import { Voting } from "@/components/Voting";
import { useSession } from "next-auth/react";
import { useToasterStore } from "react-hot-toast";
import Head from "next/head";
import { HiOutlineDotsVertical } from "react-icons/hi";
import { set } from "nprogress";
import { comment } from "postcss";
import { MdAccessTime } from "react-icons/md";

export default function AdminPage(props) {
  // sections:
  // 1- list of categories with filter and search
  // 2- list of topics with filter and search
  // 3- list of analogies with filter and search
  // 4- list of users with filter and search
  // 5- list of comments with filter and search

  const router = useRouter();

  const { data: categoriesData, isFetching: categoriesFetching } =
    api.category.getAll.useQuery();

  const { data: topicsData, isFetching: topicsFetching } =
    api.topic.getAll.useQuery();

  const { data: analogiesData, isFetching: analogiesFetching } =
    api.analogy.getAll.useQuery();

  const { data: usersData, isFetching: usersFetching } =
    api.profile.getTopThree.useQuery();

  // const { data: commentsData, isFetching: commentsFetching } =
  //   api.comment.getAll.useQuery();

  const [searchTerm, setSearchTerm] = React.useState("");
  const debouncedSearchTerm = useDebounce(searchTerm, 500);
  const [searchResults, setSearchResults] = React.useState([]);
  const [listIsShown, setListIsShown] = React.useState(true);
  const [activeSection, setActiveSection] = React.useState("Categories");

  return (
    <>
      <Head>
        <title>CSLIT - Admin Panel</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <PillsRow
          setActiveSection={setActiveSection}
          activeSection={activeSection}
        />
        <ListView
          listIsShown={listIsShown}
          data={
            activeSection === "Categories"
              ? categoriesData
              : activeSection === "Topics"
              ? topicsData
              : activeSection === "Analogies"
              ? analogiesData
              : activeSection === "Users"
              ? usersData
              : []
            // : commentsData
          }
          title={activeSection}
        />
      </PageLayout>
    </>
  );
}

function PillsRow({
  setActiveSection,
  activeSection,
}: {
  setActiveSection: React.Dispatch<React.SetStateAction<string>>;
  activeSection: string;
}) {
  return (
    <div
      id="pills-row"
      className="mt-[90px] flex flex-row items-start gap-3 bg-[#F9F9F9]  px-16 py-8"
    >
      <Pill
        title="Categories"
        setActiveSection={setActiveSection}
        activeSection={activeSection}
      />
      <Pill
        title="Topics"
        setActiveSection={setActiveSection}
        activeSection={activeSection}
      />
      <Pill
        title="Users"
        setActiveSection={setActiveSection}
        activeSection={activeSection}
      />
      <Pill
        title="Analogies"
        setActiveSection={setActiveSection}
        activeSection={activeSection}
      />
      <Pill
        title="Comments"
        setActiveSection={setActiveSection}
        activeSection={activeSection}
      />
    </div>
  );
}

function Pill({
  title,
  setActiveSection,
  activeSection,
}: {
  title: string;
  setActiveSection: React.Dispatch<React.SetStateAction<string>>;
  activeSection: string;
}) {
  return (
    <>
      <div
        className={`flex cursor-pointer items-center justify-center rounded-[12px] border px-5 py-1 shadow-sm ${
          activeSection === title
            ? "border-[#b5431a] bg-[#e95620] text-white "
            : "border-[#d1d1d1] bg-[#ffffff] text-[#2A2A2E]"
        }`}
        onClick={() => setActiveSection(title)}
      >
        <h1 className={` text-sm font-bold`}>{title}</h1>
      </div>
    </>
  );
}

function ListView({
  listIsShown,
  data,
  title,
}: {
  title: string;
  listIsShown: boolean;
  data: any;
}) {
  return (
    <div className=" relative z-20 mx-auto h-full  overflow-clip   border  border-gray-200 bg-white px-0 shadow-lg transition-all ">
      {listIsShown && (
        <>
          <div className="flex flex-row items-center justify-between border-y border-l-0 border-[#5a5a5a2a] bg-gradient-to-tr from-[#eeeeee] to-[#dcdcdc] px-16 py-8">
            <div className="flex flex-row items-center ">
              <span className="mr-3 rounded-md border border-[#73717180] bg-[#00000013] px-2 pt-0.5 text-sm text-gray-500 shadow-sm">
                {data?.length ?? 0}
              </span>
              <h1
                className={` ${archivo.className}  flex flex-row items-center gap-1 text-3xl font-bold`}
              >
                {title}
              </h1>
            </div>
            <div className="flex flex-row">
              <input
                type="text"
                placeholder="Search"
                className="mr-2 max-w-[60%] rounded-md border border-[#00000030] px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-gray-200"
              />

              <div className="grid grid-cols-2 gap-2 rounded-md bg-[#00000030] px-[2.5px] py-0.5 text-sm text-[#2f2f2f]">
                <div>
                  <input
                    type="radio"
                    name="option"
                    id="all"
                    value="All"
                    className="peer hidden"
                    checked
                  />
                  <label
                    htmlFor="all"
                    className=" flex cursor-pointer select-none flex-row items-center justify-center gap-1 rounded-md border border-transparent px-3 py-1 text-center peer-checked:border-[#0000006d] peer-checked:bg-gray-50 peer-checked:font-bold peer-checked:text-black peer-checked:shadow-sm"
                  >
                    <LuList className="mb-[4px]" />
                    All
                  </label>
                </div>

                <div>
                  <input
                    type="radio"
                    name="option"
                    id="pending"
                    value="Pending"
                    className="peer hidden"
                  />
                  <label
                    htmlFor="pending"
                    className="flex cursor-pointer select-none flex-row items-center justify-center gap-1 rounded-md border border-transparent px-3 py-1 text-center peer-checked:border-[#0000006d] peer-checked:bg-gray-50 peer-checked:font-bold peer-checked:text-black peer-checked:shadow-sm"
                  >
                    <MdAccessTime className="mb-[3px]" /> Pending
                  </label>
                </div>
              </div>
            </div>
          </div>
          <div className="flex w-full flex-col">
            {data?.map((item) => (
              <ListItemView key={item.id} item={item} />
            ))}
          </div>
        </>
      )}
    </div>
  );
}

function ListItemView({ item }) {
  const [showActionMenuDots, setShowActionMenuDots] = React.useState(false);

  return (
    <div
      className="z-0 flex h-8 w-full cursor-pointer flex-row items-center justify-between border-b-[1px] border-gray-100  px-16 py-6 transition-all hover:bg-gray-100"
      // key={item.id}
      onMouseEnter={() => setShowActionMenuDots(true)}
      onMouseLeave={() => setShowActionMenuDots(false)}
    >
      <div className="flex flex-row items-center">
        <h1 className={`font text-sm font-bold`}>
          {item.title ? item.title : item.name ? item.name : item.id}
        </h1>
        <span className="ml-2 text-sm text-gray-500">{item?.status ?? ""}</span>
      </div>
      <div className={`${showActionMenuDots ? "visible" : "hidden"} `}>
        <ActionMenu />{" "}
      </div>
    </div>
  );
}

function ActionMenu() {
  const [showExtendedActionMenu, setShowExtendedActionMenu] =
    React.useState(false);
  return (
    <div
      id="action-menu"
      className="z-10 flex flex-row items-center rounded-lg hover:bg-[#00000014]"
      onMouseLeave={() => setShowExtendedActionMenu(false)}
    >
      {showExtendedActionMenu && (
        <div
          id="action-menu-items"
          className="flex flex-row items-center rounded-l-lg bg-[#00000014] p-2"
        >
          <MdDelete className="mx-2 cursor-pointer text-[#c83535] hover:text-[#cd8a8a]" />
          <AiTwotoneEdit className="mx-2 cursor-pointer text-gray-600 hover:text-gray-400" />
        </div>
      )}

      <button
        onClick={() => setShowExtendedActionMenu(!showExtendedActionMenu)}
      >
        <HiOutlineDotsVertical
          className={`h-8 w-8 cursor-pointer rounded-lg p-2 text-gray-400 hover:bg-[#00000014] ${
            showExtendedActionMenu ? "rounded-l-none" : ""
          }`}
        />
      </button>
    </div>
  );
}

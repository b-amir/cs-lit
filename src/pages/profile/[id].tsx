import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { api } from "@/utils/api";
import { AnalogyView } from "@/components/AnalogyView";
import { PageLayout } from "@/components/layout";
import { generateSSGHelper } from "@/server/helpers/ssgHelper";
import { LoadingPage } from "@/components/loading";
import Image from "next/image";
import { useRouter } from "next/router";
import { log } from "console";

// this is a page that is renderd when a user visits /profile/[id]
// the point of this page is to show a user's profile and all analogies that they created

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.analogy.getAnalogiesByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) return <LoadingPage />;
  if (!data || data.length === 0) {
    return <>User has not posted any analogies.</>;
  }

  return (
    <div className="flex w-full flex-col items-center justify-center">
      {data.map((fullAnalogy) => (
        <AnalogyView
          analogy={{
            id: fullAnalogy.id,
            description: fullAnalogy.description,
          }}
          author={{
            name: fullAnalogy.user?.name ?? "",
            email: fullAnalogy.user?.email ?? "",
            image: fullAnalogy.user?.image ?? "",
            id: fullAnalogy.user?.id ?? "",
          }}
          {...fullAnalogy}
          key={fullAnalogy.id}
        />
      ))}
    </div>
  );
};

const ProfilePage: NextPage<{}> = () => {
  // api.analogy.getAll.useQuery();

  // now we have to get the user id from the url
  // we can do this by using the useRouter hook

  const router = useRouter();
  const { id: UrlId } = router.query;

  const { data, isFetching } = api.profile.getProfileById.useQuery({
    id: UrlId as string,
  });

  // if (isFetching) return <LoadingPage />;
  if (!data) {
    return <div>User not found</div>;
  }
  return (
    <>
      <Head>
        <title>{data.name || data.email}'s Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div
          id="profile-page"
          className="z-10 mx-auto mb-20 mt-32 flex max-w-[640px] flex-col items-start justify-between "
        >
          <div
            id="profile-header"
            className="flex w-full flex-col items-center justify-center"
          >
            <div className="mb-12 flex w-full flex-row  border-b-2 border-[#827c7c2b] px-2 py-10">
              <Image
                src={data.profileImageUrl ?? "/default-profile.png"}
                className="max-w-14 -mt-1.5 mr-4 max-h-14 rounded-full"
                alt={"Profile Picture"}
                width={42}
                height={42}
              />

              <p className="text-2xl font-bold text-[#343437]">
                {data.name}
                <span className="font-semibold text-[#535357]">
                  &apos;s Analogies
                </span>
              </p>
            </div>
          </div>
          <ProfileFeed userId={data.id} />
        </div>
      </PageLayout>
    </>
  );
};

export default ProfilePage;

// export const getStaticProps: GetStaticProps = async (context) => {
//   const ssg = generateSSGHelper();

//   const userId = context.params?.userId as string;
//   if (typeof userId !== "string") throw new Error("slug is not a string");

//   // const userId = slug.replace("@", "");
//   await ssg.profile.getUserId.prefetch({ id: userId });

//   return {
//     props: {
//       trpcState: JSON.parse(JSON.stringify(ssg.dehydrate())),
//       userId,
//     },
//   };
// };

// export const getStaticPaths = () => {
//   return { paths: [], fallback: "blocking" };
// };
